---
source: tests/guppy.rs
expression: compile(&mut hugr)
---
; ModuleID = 'hugr-qir'
source_filename = "hugr-qir"

%QUBIT = type opaque
%RESULT = type opaque

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [47 x i8] c"tket2.rotation.from_halfturns_unchecked failed\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@3 = private unnamed_addr constant [47 x i8] c"tket2.rotation.from_halfturns_unchecked failed\00", align 1
@prelude.panic_template.3 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@4 = private unnamed_addr constant [47 x i8] c"tket2.rotation.from_halfturns_unchecked failed\00", align 1
@prelude.panic_template.4 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"0\00", align 1

define void @__hugr__.main.1() #0 {
alloca_block:
  %0 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %1 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %0, 1
  %2 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %3 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %2, 1
  %4 = extractvalue { i1, %QUBIT* } %1, 0
  %cond = icmp eq i1 %4, true
  br i1 %cond, label %cond_70_case_1, label %cond_70_case_0

cond_70_case_1:                                   ; preds = %alloca_block
  %5 = extractvalue { i1, %QUBIT* } %1, 1
  br label %cond_exit_70

cond_70_case_0:                                   ; preds = %alloca_block
  %6 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 0
  %7 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 1
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %6, i8* %7)
  call void @abort()
  br label %cond_exit_70

cond_exit_70:                                     ; preds = %cond_70_case_1, %cond_70_case_0
  %"0.0" = phi %QUBIT* [ null, %cond_70_case_0 ], [ %5, %cond_70_case_1 ]
  call void @__quantum__qis__phasedx__body(double 0xBFF921FB54442D18, double 0x3FF921FB54442D18, %QUBIT* %"0.0")
  %9 = extractvalue { i1, %QUBIT* } %3, 0
  %cond91 = icmp eq i1 %9, true
  br i1 %cond91, label %cond_59_case_1, label %cond_59_case_0

cond_59_case_1:                                   ; preds = %cond_exit_70
  %10 = extractvalue { i1, %QUBIT* } %3, 1
  br label %cond_exit_59

cond_59_case_0:                                   ; preds = %cond_exit_70
  %11 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 0
  %12 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 1
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %11, i8* %12)
  call void @abort()
  br label %cond_exit_59

cond_exit_59:                                     ; preds = %cond_59_case_1, %cond_59_case_0
  %"012.0" = phi %QUBIT* [ null, %cond_59_case_0 ], [ %10, %cond_59_case_1 ]
  call void @__quantum__qis__phasedx__body(double 0x3FF921FB54442D18, double 0xBFF921FB54442D18, %QUBIT* %"012.0")
  call void @__quantum__qis__rz__body(double 0x400921FB54442D18, %QUBIT* %"012.0")
  call void @__quantum__qis__rz__body(double 0x3FF921FB54442D18, %QUBIT* %"012.0")
  call void @__quantum__qis__rz__body(double 0x3FE921FB54442D18, %QUBIT* %"012.0")
  call void @__quantum__qis__phasedx__body(double 0x400921FB54442D18, double 0.000000e+00, %QUBIT* %"012.0")
  call void @__quantum__qis__phasedx__body(double 0x400921FB54442D18, double 0x3FF921FB54442D18, %QUBIT* %"012.0")
  call void @__quantum__qis__rz__body(double 0x400921FB54442D18, %QUBIT* %"012.0")
  call void @__quantum__qis__zzmax__body(%QUBIT* %"012.0", %QUBIT* %"0.0")
  call void @__quantum__qis__phasedx__body(double 0x3FF921FB54442D18, double 0x400921FB54442D18, %QUBIT* %"0.0")
  call void @__quantum__qis__rz__body(double 0xBFF921FB54442D18, %QUBIT* %"0.0")
  call void @__quantum__qis__rz__body(double 0xBFF921FB54442D18, %QUBIT* %"012.0")
  call void @__quantum__qis__phasedx__body(double 0x400921FB54442D18, double 0x400921FB54442D18, %QUBIT* %"012.0")
  call void @__quantum__qis__zzmax__body(%QUBIT* %"012.0", %QUBIT* %"0.0")
  call void @__quantum__qis__rz__body(double 0x3FF921FB54442D18, %QUBIT* %"0.0")
  %14 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"0.0")
  %15 = call i1 @__quantum__qis__read_result__body(%RESULT* %14)
  %16 = select i1 %15, i1 true, i1 false
  call void @__quantum__qis__phasedx__body(double 0x400921FB54442D18, double 0x3FF921FB54442D18, %QUBIT* %"012.0")
  call void @__quantum__qis__rz__body(double 0xBFF921FB54442D18, %QUBIT* %"012.0")
  %17 = fcmp oeq double 1.500000e+00, 0x7FF0000000000000
  %18 = fcmp oeq double 1.500000e+00, 0xFFF0000000000000
  %19 = fcmp uno double 1.500000e+00, 0.000000e+00
  %20 = or i1 %17, %18
  %21 = or i1 %20, %19
  %22 = xor i1 %21, true
  br i1 %22, label %25, label %23

23:                                               ; preds = %cond_exit_59
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @2, i32 0, i32 0))
  call void @abort()
  unreachable

25:                                               ; preds = %cond_exit_59
  %26 = fmul double 1.500000e+00, 0x400921FB54442D18
  %27 = fcmp oeq double 1.500000e+00, 0x7FF0000000000000
  %28 = fcmp oeq double 1.500000e+00, 0xFFF0000000000000
  %29 = fcmp uno double 1.500000e+00, 0.000000e+00
  %30 = or i1 %27, %28
  %31 = or i1 %30, %29
  %32 = xor i1 %31, true
  br i1 %32, label %35, label %33

33:                                               ; preds = %25
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.3, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @3, i32 0, i32 0))
  call void @abort()
  unreachable

35:                                               ; preds = %25
  %36 = fmul double 1.500000e+00, 0x400921FB54442D18
  %37 = fcmp oeq double 1.500000e+00, 0x7FF0000000000000
  %38 = fcmp oeq double 1.500000e+00, 0xFFF0000000000000
  %39 = fcmp uno double 1.500000e+00, 0.000000e+00
  %40 = or i1 %37, %38
  %41 = or i1 %40, %39
  %42 = xor i1 %41, true
  br i1 %42, label %45, label %43

43:                                               ; preds = %35
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.4, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @4, i32 0, i32 0))
  call void @abort()
  unreachable

45:                                               ; preds = %35
  %46 = fmul double 1.500000e+00, 0x400921FB54442D18
  call void @__quantum__qis__phasedx__body(double %46, double 0.000000e+00, %QUBIT* %"012.0")
  call void @__quantum__qis__phasedx__body(double %36, double 0x3FF921FB54442D18, %QUBIT* %"012.0")
  call void @__quantum__qis__rz__body(double %26, %QUBIT* %"012.0")
  %47 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"012.0")
  %48 = call i1 @__quantum__qis__read_result__body(%RESULT* %47)
  %49 = select i1 %48, i1 true, i1 false
  %50 = select i1 %16, i1 true, i1 false
  call void @__quantum__rt__bool_record_output(i1 %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  %51 = select i1 %49, i1 true, i1 false
  call void @__quantum__rt__bool_record_output(i1 %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0))
  ret void
}

declare %QUBIT* @__quantum__rt__qubit_allocate()

declare i32 @printf(i8*, ...)

declare void @abort()

declare void @__quantum__qis__phasedx__body(double, double, %QUBIT*)

declare void @__quantum__qis__rz__body(double, %QUBIT*)

declare void @__quantum__qis__zzmax__body(%QUBIT*, %QUBIT*)

declare %RESULT* @__quantum__qis__m__body(%QUBIT*)

declare i1 @__quantum__qis__read_result__body(%RESULT*)

declare void @__quantum__rt__bool_record_output(i1, i8*)

attributes #0 = { "entry_point" "output_labeling_schema" "qir_profiles"="custom" "required_num_qubits"="20" "required_num_results"="20" }

!llvm.module.flags = !{!0, !1, !2, !3}

!0 = !{i32 1, !"qir_major_version", i32 1}
!1 = !{i32 7, !"qir_minor_version", i32 0}
!2 = !{i32 1, !"dynamic_qubit_management", i1 false}
!3 = !{i32 1, !"dynamic_result_management", i1 false}
