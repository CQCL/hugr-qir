---
source: tests/guppy.rs
expression: compile(&mut hugr)
---
; ModuleID = 'hugr-qir'
source_filename = "hugr-qir"

%QUBIT = type opaque
%RESULT = type opaque

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"0\00", align 1

define %QUBIT* @__hugr__.fun_func.1(%QUBIT* %0) #0 {
alloca_block:
  %"0" = alloca %QUBIT*, align 8
  %"2_0" = alloca %QUBIT*, align 8
  %"4_0" = alloca %QUBIT*, align 8
  %"6_0" = alloca %QUBIT*, align 8
  %"02" = alloca %QUBIT*, align 8
  %"11_0" = alloca {}, align 8
  %"44_0" = alloca %QUBIT*, align 8
  %"42_0" = alloca double, align 8
  %"40_0" = alloca double, align 8
  %"43_0" = alloca %QUBIT*, align 8
  %"38_0" = alloca double, align 8
  %"10_0" = alloca {}, align 8
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  store %QUBIT* %0, %QUBIT** %"2_0", align 8
  %"2_01" = load %QUBIT*, %QUBIT** %"2_0", align 8
  store %QUBIT* %"2_01", %QUBIT** %"6_0", align 8
  br label %1

1:                                                ; preds = %entry_block
  %"6_03" = load %QUBIT*, %QUBIT** %"6_0", align 8
  store %QUBIT* %"6_03", %QUBIT** %"6_0", align 8
  store double 0xBFF921FB54442D18, double* %"42_0", align 8
  store double 0x3FF921FB54442D18, double* %"40_0", align 8
  %"6_04" = load %QUBIT*, %QUBIT** %"6_0", align 8
  %"40_05" = load double, double* %"40_0", align 8
  %"42_06" = load double, double* %"42_0", align 8
  call void @__quantum__qis__phasedx__body(double %"40_05", double %"42_06", %QUBIT* %"6_04")
  store %QUBIT* %"6_04", %QUBIT** %"43_0", align 8
  store double 0x400921FB54442D18, double* %"38_0", align 8
  %"43_07" = load %QUBIT*, %QUBIT** %"43_0", align 8
  %"38_08" = load double, double* %"38_0", align 8
  call void @__quantum__qis__rz__body(double %"38_08", %QUBIT* %"43_07")
  store %QUBIT* %"43_07", %QUBIT** %"44_0", align 8
  store {} undef, {}* %"11_0", align 1
  store {} undef, {}* %"10_0", align 1
  %"11_09" = load {}, {}* %"11_0", align 1
  %"44_010" = load %QUBIT*, %QUBIT** %"44_0", align 8
  store {} %"11_09", {}* %"11_0", align 1
  store %QUBIT* %"44_010", %QUBIT** %"44_0", align 8
  %"11_011" = load {}, {}* %"11_0", align 1
  %"44_012" = load %QUBIT*, %QUBIT** %"44_0", align 8
  switch i1 false, label %2 [
  ]

2:                                                ; preds = %1
  store %QUBIT* %"44_012", %QUBIT** %"02", align 8
  br label %3

3:                                                ; preds = %2
  %"013" = load %QUBIT*, %QUBIT** %"02", align 8
  store %QUBIT* %"013", %QUBIT** %"4_0", align 8
  %"4_014" = load %QUBIT*, %QUBIT** %"4_0", align 8
  store %QUBIT* %"4_014", %QUBIT** %"0", align 8
  %"015" = load %QUBIT*, %QUBIT** %"0", align 8
  ret %QUBIT* %"015"
}

declare void @__quantum__qis__phasedx__body(double, double, %QUBIT*)

declare void @__quantum__qis__rz__body(double, %QUBIT*)

define void @__hugr__.main.12() {
alloca_block:
  %"32_0" = alloca {}, align 8
  %"57_0" = alloca { i1, %QUBIT* }, align 8
  %"46_0" = alloca { i1, %QUBIT* }, align 8
  %"58_0" = alloca %QUBIT*, align 8
  %"0" = alloca %QUBIT*, align 8
  %"63_0" = alloca { i32, i8* }, align 8
  %"64_0" = alloca %QUBIT*, align 8
  %"05" = alloca %QUBIT*, align 8
  %"66_0" = alloca %QUBIT*, align 8
  %"47_0" = alloca %QUBIT*, align 8
  %"09" = alloca %QUBIT*, align 8
  %"52_0" = alloca { i32, i8* }, align 8
  %"53_0" = alloca %QUBIT*, align 8
  %"013" = alloca %QUBIT*, align 8
  %"55_0" = alloca %QUBIT*, align 8
  %"31_0" = alloca {}, align 8
  %"28_0" = alloca {}, align 8
  %"25_0" = alloca {}, align 8
  %"24_0" = alloca %QUBIT*, align 8
  %"71_0" = alloca i1, align 1
  %"23_0" = alloca {}, align 8
  %"22_0" = alloca %QUBIT*, align 8
  %"68_0" = alloca i1, align 1
  %"72_0" = alloca i1, align 1
  %"69_0" = alloca i1, align 1
  br label %entry_block

entry_block:                                      ; preds = %alloca_block
  br label %0

0:                                                ; preds = %entry_block
  %1 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %2 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %1, 1
  store { i1, %QUBIT* } %2, { i1, %QUBIT* }* %"57_0", align 8
  %3 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %4 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %3, 1
  store { i1, %QUBIT* } %4, { i1, %QUBIT* }* %"46_0", align 8
  %"57_01" = load { i1, %QUBIT* }, { i1, %QUBIT* }* %"57_0", align 8
  %5 = extractvalue { i1, %QUBIT* } %"57_01", 0
  switch i1 %5, label %6 [
    i1 true, label %7
  ]

6:                                                ; preds = %0
  br label %cond_58_case_0

7:                                                ; preds = %0
  %8 = extractvalue { i1, %QUBIT* } %"57_01", 1
  store %QUBIT* %8, %QUBIT** %"05", align 8
  br label %cond_58_case_1

9:                                                ; preds = %30
  ret void

cond_58_case_0:                                   ; preds = %6
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, { i32, i8* }* %"63_0", align 8
  %"63_03" = load { i32, i8* }, { i32, i8* }* %"63_0", align 8
  %10 = extractvalue { i32, i8* } %"63_03", 0
  %11 = extractvalue { i32, i8* } %"63_03", 1
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %10, i8* %11)
  call void @abort()
  store %QUBIT* null, %QUBIT** %"64_0", align 8
  %"64_04" = load %QUBIT*, %QUBIT** %"64_0", align 8
  store %QUBIT* %"64_04", %QUBIT** %"0", align 8
  br label %cond_exit_58

cond_58_case_1:                                   ; preds = %7
  %"06" = load %QUBIT*, %QUBIT** %"05", align 8
  store %QUBIT* %"06", %QUBIT** %"66_0", align 8
  %"66_07" = load %QUBIT*, %QUBIT** %"66_0", align 8
  store %QUBIT* %"66_07", %QUBIT** %"0", align 8
  br label %cond_exit_58

cond_exit_58:                                     ; preds = %cond_58_case_1, %cond_58_case_0
  %"02" = load %QUBIT*, %QUBIT** %"0", align 8
  store %QUBIT* %"02", %QUBIT** %"58_0", align 8
  %"46_08" = load { i1, %QUBIT* }, { i1, %QUBIT* }* %"46_0", align 8
  %13 = extractvalue { i1, %QUBIT* } %"46_08", 0
  switch i1 %13, label %14 [
    i1 true, label %15
  ]

14:                                               ; preds = %cond_exit_58
  br label %cond_47_case_0

15:                                               ; preds = %cond_exit_58
  %16 = extractvalue { i1, %QUBIT* } %"46_08", 1
  store %QUBIT* %16, %QUBIT** %"013", align 8
  br label %cond_47_case_1

cond_47_case_0:                                   ; preds = %14
  store { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, { i32, i8* }* %"52_0", align 8
  %"52_011" = load { i32, i8* }, { i32, i8* }* %"52_0", align 8
  %17 = extractvalue { i32, i8* } %"52_011", 0
  %18 = extractvalue { i32, i8* } %"52_011", 1
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %17, i8* %18)
  call void @abort()
  store %QUBIT* null, %QUBIT** %"53_0", align 8
  %"53_012" = load %QUBIT*, %QUBIT** %"53_0", align 8
  store %QUBIT* %"53_012", %QUBIT** %"09", align 8
  br label %cond_exit_47

cond_47_case_1:                                   ; preds = %15
  %"014" = load %QUBIT*, %QUBIT** %"013", align 8
  store %QUBIT* %"014", %QUBIT** %"55_0", align 8
  %"55_015" = load %QUBIT*, %QUBIT** %"55_0", align 8
  store %QUBIT* %"55_015", %QUBIT** %"09", align 8
  br label %cond_exit_47

cond_exit_47:                                     ; preds = %cond_47_case_1, %cond_47_case_0
  %"010" = load %QUBIT*, %QUBIT** %"09", align 8
  store %QUBIT* %"010", %QUBIT** %"47_0", align 8
  store {} undef, {}* %"32_0", align 1
  store {} undef, {}* %"31_0", align 1
  store {} undef, {}* %"28_0", align 1
  store {} undef, {}* %"25_0", align 1
  %"58_016" = load %QUBIT*, %QUBIT** %"58_0", align 8
  %20 = call %QUBIT* @__hugr__.fun_func.1(%QUBIT* %"58_016")
  store %QUBIT* %20, %QUBIT** %"24_0", align 8
  %"24_017" = load %QUBIT*, %QUBIT** %"24_0", align 8
  %21 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"24_017")
  %22 = call i1 @__quantum__qis__read_result__body(%RESULT* %21)
  %23 = select i1 %22, i1 true, i1 false
  store i1 %23, i1* %"71_0", align 1
  store {} undef, {}* %"23_0", align 1
  %"47_018" = load %QUBIT*, %QUBIT** %"47_0", align 8
  %24 = call %QUBIT* @__hugr__.fun_func.1(%QUBIT* %"47_018")
  store %QUBIT* %24, %QUBIT** %"22_0", align 8
  %"22_019" = load %QUBIT*, %QUBIT** %"22_0", align 8
  %25 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"22_019")
  %26 = call i1 @__quantum__qis__read_result__body(%RESULT* %25)
  %27 = select i1 %26, i1 true, i1 false
  store i1 %27, i1* %"68_0", align 1
  %"71_020" = load i1, i1* %"71_0", align 1
  %28 = select i1 %"71_020", i1 true, i1 false
  store i1 %28, i1* %"72_0", align 1
  %"72_021" = load i1, i1* %"72_0", align 1
  call void @__quantum__rt__bool_record_output(i1 %"72_021", i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %"68_022" = load i1, i1* %"68_0", align 1
  %29 = select i1 %"68_022", i1 true, i1 false
  store i1 %29, i1* %"69_0", align 1
  %"69_023" = load i1, i1* %"69_0", align 1
  call void @__quantum__rt__bool_record_output(i1 %"69_023", i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  %"32_024" = load {}, {}* %"32_0", align 1
  store {} %"32_024", {}* %"32_0", align 1
  %"32_025" = load {}, {}* %"32_0", align 1
  switch i1 false, label %30 [
  ]

30:                                               ; preds = %cond_exit_47
  br label %9
}

declare %QUBIT* @__quantum__rt__qubit_allocate()

declare i32 @printf(i8*, ...)

declare void @abort()

declare %RESULT* @__quantum__qis__m__body(%QUBIT*)

declare i1 @__quantum__qis__read_result__body(%RESULT*)

declare void @__quantum__rt__bool_record_output(i1, i8*)

attributes #0 = { "entry_point" "output_labeling_schema" "qir_profiles"="custom" "required_num_qubits"="20" "required_num_results"="20" }
