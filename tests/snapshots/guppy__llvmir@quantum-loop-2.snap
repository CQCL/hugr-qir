---
source: tests/guppy.rs
expression: compile(&mut hugr)
---
; ModuleID = 'hugr-qir'
source_filename = "hugr-qir"

%QUBIT = type opaque
%RESULT = type opaque

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @__hugr__.main.1() #0 {
alloca_block:
  %0 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %1 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %0, 1
  %2 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %3 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %2, 1
  %4 = extractvalue { i1, %QUBIT* } %1, 0
  br i1 %4, label %cond_133_case_1, label %cond_133_case_0

cond_133_case_1:                                  ; preds = %alloca_block
  br label %cond_exit_133

5:                                                ; preds = %20, %cond_exit_122
  %"19_1.0" = phi i64 [ 10, %cond_exit_122 ], [ %30, %20 ]
  %"19_0.0" = phi i64 [ 0, %cond_exit_122 ], [ %29, %20 ]
  %6 = insertvalue { i64, i64 } poison, i64 %"19_0.0", 0
  %7 = insertvalue { i64, i64 } %6, i64 %"19_1.0", 1
  %8 = call { i1, { i64, i64 } } @__hugr__.__hasnext__.25({ i64, i64 } %7)
  %9 = extractvalue { i1, { i64, i64 } } %8, 0
  %10 = extractvalue { i1, { i64, i64 } } %8, 1
  br i1 %9, label %11, label %15

11:                                               ; preds = %5
  %12 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %13 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %12, 1
  %14 = extractvalue { i1, %QUBIT* } %13, 0
  br i1 %14, label %cond_144_case_1, label %cond_144_case_0

cond_144_case_1:                                  ; preds = %11
  br label %cond_exit_144

15:                                               ; preds = %5
  %16 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"0.0")
  %17 = call i1 @__quantum__qis__read_result__body(%RESULT* %16)
  %18 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"09.0")
  %19 = call i1 @__quantum__qis__read_result__body(%RESULT* %18)
  call void @__hugr__.__end__.36({ i64, i64 } %10)
  call void @__quantum__rt__bool_record_output(i1 %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  call void @__quantum__rt__bool_record_output(i1 %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  ret void

20:                                               ; preds = %cond_exit_144, %31
  br label %5

cond_133_case_0:                                  ; preds = %alloca_block
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0))
  call void @abort()
  br label %cond_exit_133

cond_exit_133:                                    ; preds = %cond_133_case_1, %cond_133_case_0
  %"0.0" = phi %QUBIT* [ null, %cond_133_case_0 ], [ %0, %cond_133_case_1 ]
  %22 = extractvalue { i1, %QUBIT* } %3, 0
  br i1 %22, label %cond_122_case_1, label %cond_122_case_0

cond_122_case_1:                                  ; preds = %cond_exit_133
  br label %cond_exit_122

cond_122_case_0:                                  ; preds = %cond_exit_133
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0))
  call void @abort()
  br label %cond_exit_122

cond_exit_122:                                    ; preds = %cond_122_case_1, %cond_122_case_0
  %"09.0" = phi %QUBIT* [ null, %cond_122_case_0 ], [ %2, %cond_122_case_1 ]
  br label %5

cond_144_case_0:                                  ; preds = %11
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0))
  call void @abort()
  br label %cond_exit_144

cond_exit_144:                                    ; preds = %cond_144_case_1, %cond_144_case_0
  %"084.0" = phi %QUBIT* [ null, %cond_144_case_0 ], [ %12, %cond_144_case_1 ]
  call void @__quantum__qis__phasedx__body(double 0x3FF921FB54442D18, double 0xBFF921FB54442D18, %QUBIT* %"084.0")
  call void @__quantum__qis__rz__body(double 0x400921FB54442D18, %QUBIT* %"084.0")
  %25 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"084.0")
  %26 = call i1 @__quantum__qis__read_result__body(%RESULT* %25)
  %27 = call { i64, { i64, i64 } } @__hugr__.__next__.52({ i64, i64 } %10)
  %28 = extractvalue { i64, { i64, i64 } } %27, 1
  %29 = extractvalue { i64, i64 } %28, 0
  %30 = extractvalue { i64, i64 } %28, 1
  br i1 %26, label %31, label %20

31:                                               ; preds = %cond_exit_144
  call void @__quantum__qis__phasedx__body(double 0x3FF921FB54442D18, double 0xBFF921FB54442D18, %QUBIT* %"09.0")
  call void @__quantum__qis__rz__body(double 0x400921FB54442D18, %QUBIT* %"09.0")
  br label %20
}

declare %QUBIT* @__quantum__rt__qubit_allocate()

declare i32 @printf(i8*, ...)

declare void @abort()

define { i1, { i64, i64 } } @__hugr__.__hasnext__.25({ i64, i64 } %0) {
alloca_block:
  %1 = extractvalue { i64, i64 } %0, 0
  %2 = extractvalue { i64, i64 } %0, 1
  %3 = icmp slt i64 %1, %2
  %mrv = insertvalue { i1, { i64, i64 } } undef, i1 %3, 0
  %mrv25 = insertvalue { i1, { i64, i64 } } %mrv, { i64, i64 } %0, 1
  ret { i1, { i64, i64 } } %mrv25
}

declare %RESULT* @__quantum__qis__m__body(%QUBIT*)

declare i1 @__quantum__qis__read_result__body(%RESULT*)

define void @__hugr__.__end__.36({ i64, i64 } %0) {
alloca_block:
  ret void
}

declare void @__quantum__rt__bool_record_output(i1, i8*)

declare void @__quantum__qis__phasedx__body(double, double, %QUBIT*)

declare void @__quantum__qis__rz__body(double, %QUBIT*)

define { i64, { i64, i64 } } @__hugr__.__next__.52({ i64, i64 } %0) {
alloca_block:
  %1 = extractvalue { i64, i64 } %0, 0
  %2 = extractvalue { i64, i64 } %0, 1
  %3 = add i64 %1, 1
  %4 = insertvalue { i64, i64 } poison, i64 %3, 0
  %5 = insertvalue { i64, i64 } %4, i64 %2, 1
  %mrv = insertvalue { i64, { i64, i64 } } undef, i64 %1, 0
  %mrv25 = insertvalue { i64, { i64, i64 } } %mrv, { i64, i64 } %5, 1
  ret { i64, { i64, i64 } } %mrv25
}

attributes #0 = { "entry_point" "output_labeling_schema" "qir_profiles"="custom" "required_num_qubits"="20" "required_num_results"="20" }

!llvm.module.flags = !{!0, !1, !2, !3}

!0 = !{i32 1, !"qir_major_version", i32 1}
!1 = !{i32 7, !"qir_minor_version", i32 0}
!2 = !{i32 1, !"dynamic_qubit_management", i1 false}
!3 = !{i32 1, !"dynamic_result_management", i1 false}
