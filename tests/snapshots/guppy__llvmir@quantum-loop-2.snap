---
source: tests/guppy.rs
expression: compile(&mut hugr)
---
; ModuleID = 'hugr-qir'
source_filename = "hugr-qir"

%QUBIT = type opaque
%RESULT = type opaque

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @__hugr__.main.1() #0 {
alloca_block:
  %0 = insertvalue { i64, i64 } poison, i64 0, 0
  %1 = insertvalue { i64, i64 } %0, i64 10, 1
  %2 = extractvalue { i64, i64 } %1, 0
  %3 = extractvalue { i64, i64 } %1, 1
  %4 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %5 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %4, 1
  %6 = extractvalue { i1, %QUBIT* } %5, 0
  %cond = icmp eq i1 %6, true
  br i1 %cond, label %cond_230_case_1, label %cond_230_case_0

cond_230_case_1:                                  ; preds = %alloca_block
  %7 = extractvalue { i1, %QUBIT* } %5, 1
  br label %cond_exit_230

8:                                                ; preds = %28, %cond_exit_243
  %"19_1.0" = phi i64 [ %3, %cond_exit_243 ], [ %73, %28 ]
  %"19_0.0" = phi i64 [ %2, %cond_exit_243 ], [ %72, %28 ]
  %9 = insertvalue { i64, i64 } poison, i64 %"19_0.0", 0
  %10 = insertvalue { i64, i64 } %9, i64 %"19_1.0", 1
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = extractvalue { i64, i64 } %10, 1
  %13 = insertvalue { i64, i64 } poison, i64 %11, 0
  %14 = insertvalue { i64, i64 } %13, i64 %12, 1
  %15 = icmp slt i64 %11, %12
  %16 = select i1 %15, i1 true, i1 false
  %17 = insertvalue { { i64, i64 }, i1 } poison, i1 %16, 1
  %18 = insertvalue { { i64, i64 }, i1 } %17, { i64, i64 } %14, 0
  %19 = extractvalue { { i64, i64 }, i1 } %18, 1
  %20 = extractvalue { { i64, i64 }, i1 } %18, 0
  %21 = insertvalue { { i64, i64 }, i1 } poison, i1 %19, 1
  %22 = insertvalue { { i64, i64 }, i1 } %21, { i64, i64 } %20, 0
  %23 = extractvalue { { i64, i64 }, i1 } %22, 1
  %24 = extractvalue { { i64, i64 }, i1 } %22, 0
  %25 = extractvalue { i64, i64 } %24, 0
  %26 = extractvalue { i64, i64 } %24, 1
  %cond232 = icmp eq i1 %23, true
  br i1 %cond232, label %48, label %39

cond_177_case_1:                                  ; preds = %48
  %27 = extractvalue { i1, %QUBIT* } %50, 1
  br label %cond_exit_177

28:                                               ; preds = %cond_exit_177, %75
  br label %8

cond_230_case_0:                                  ; preds = %alloca_block
  %29 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 0
  %30 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 1
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %29, i8* %30)
  call void @abort()
  br label %cond_exit_230

cond_exit_230:                                    ; preds = %cond_230_case_1, %cond_230_case_0
  %"0.0" = phi %QUBIT* [ null, %cond_230_case_0 ], [ %7, %cond_230_case_1 ]
  %32 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %33 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %32, 1
  %34 = extractvalue { i1, %QUBIT* } %33, 0
  %cond231 = icmp eq i1 %34, true
  br i1 %cond231, label %cond_243_case_1, label %cond_243_case_0

cond_243_case_1:                                  ; preds = %cond_exit_230
  %35 = extractvalue { i1, %QUBIT* } %33, 1
  br label %cond_exit_243

cond_243_case_0:                                  ; preds = %cond_exit_230
  %36 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 0
  %37 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 1
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %36, i8* %37)
  call void @abort()
  br label %cond_exit_243

cond_exit_243:                                    ; preds = %cond_243_case_0, %cond_243_case_1
  %"013.0" = phi %QUBIT* [ null, %cond_243_case_0 ], [ %35, %cond_243_case_1 ]
  br label %8

39:                                               ; preds = %8
  %40 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"0.0")
  %41 = call i1 @__quantum__qis__read_result__body(%RESULT* %40)
  %42 = select i1 %41, i1 true, i1 false
  %43 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"013.0")
  %44 = call i1 @__quantum__qis__read_result__body(%RESULT* %43)
  %45 = select i1 %44, i1 true, i1 false
  %46 = select i1 %42, i1 true, i1 false
  call void @__quantum__rt__bool_record_output(i1 %46, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %47 = select i1 %45, i1 true, i1 false
  call void @__quantum__rt__bool_record_output(i1 %47, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  ret void

48:                                               ; preds = %8
  %49 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %50 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %49, 1
  %51 = extractvalue { i1, %QUBIT* } %50, 0
  %cond233 = icmp eq i1 %51, true
  br i1 %cond233, label %cond_177_case_1, label %cond_177_case_0

cond_177_case_0:                                  ; preds = %48
  %52 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 0
  %53 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 1
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %52, i8* %53)
  call void @abort()
  br label %cond_exit_177

cond_exit_177:                                    ; preds = %cond_177_case_1, %cond_177_case_0
  %"0112.0" = phi %QUBIT* [ null, %cond_177_case_0 ], [ %27, %cond_177_case_1 ]
  call void @__quantum__qis__phasedx__body(double 0x3FF921FB54442D18, double 0xBFF921FB54442D18, %QUBIT* %"0112.0")
  call void @__quantum__qis__rz__body(double 0x400921FB54442D18, %QUBIT* %"0112.0")
  %55 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"0112.0")
  %56 = call i1 @__quantum__qis__read_result__body(%RESULT* %55)
  %57 = select i1 %56, i1 true, i1 false
  %58 = insertvalue { i64, i64 } poison, i64 %25, 0
  %59 = insertvalue { i64, i64 } %58, i64 %26, 1
  %60 = extractvalue { i64, i64 } %59, 0
  %61 = extractvalue { i64, i64 } %59, 1
  %62 = add i64 %60, 1
  %63 = insertvalue { i64, i64 } poison, i64 %62, 0
  %64 = insertvalue { i64, i64 } %63, i64 %61, 1
  %65 = insertvalue { { i64, i64 }, i64 } poison, i64 %60, 1
  %66 = insertvalue { { i64, i64 }, i64 } %65, { i64, i64 } %64, 0
  %67 = extractvalue { { i64, i64 }, i64 } %66, 1
  %68 = extractvalue { { i64, i64 }, i64 } %66, 0
  %69 = insertvalue { { i64, i64 }, i64 } poison, i64 %67, 1
  %70 = insertvalue { { i64, i64 }, i64 } %69, { i64, i64 } %68, 0
  %71 = extractvalue { { i64, i64 }, i64 } %70, 0
  %72 = extractvalue { i64, i64 } %71, 0
  %73 = extractvalue { i64, i64 } %71, 1
  %74 = select i1 %57, i1 true, i1 false
  %cond234 = icmp eq i1 %74, true
  br i1 %cond234, label %75, label %28

75:                                               ; preds = %cond_exit_177
  call void @__quantum__qis__phasedx__body(double 0x3FF921FB54442D18, double 0xBFF921FB54442D18, %QUBIT* %"013.0")
  call void @__quantum__qis__rz__body(double 0x400921FB54442D18, %QUBIT* %"013.0")
  br label %28
}

declare %QUBIT* @__quantum__rt__qubit_allocate()

declare i32 @printf(i8*, ...)

declare void @abort()

declare %RESULT* @__quantum__qis__m__body(%QUBIT*)

declare i1 @__quantum__qis__read_result__body(%RESULT*)

declare void @__quantum__rt__bool_record_output(i1, i8*)

declare void @__quantum__qis__phasedx__body(double, double, %QUBIT*)

declare void @__quantum__qis__rz__body(double, %QUBIT*)

attributes #0 = { "entry_point" "output_labeling_schema" "qir_profiles"="custom" "required_num_qubits"="20" "required_num_results"="20" }

!llvm.module.flags = !{!0, !1, !2, !3}

!0 = !{i32 1, !"qir_major_version", i32 1}
!1 = !{i32 7, !"qir_minor_version", i32 0}
!2 = !{i32 1, !"dynamic_qubit_management", i1 false}
!3 = !{i32 1, !"dynamic_result_management", i1 false}
