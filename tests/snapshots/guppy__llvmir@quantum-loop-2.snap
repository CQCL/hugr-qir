---
source: tests/guppy.rs
expression: compile(&mut hugr)
---
; ModuleID = 'hugr-qir'
source_filename = "hugr-qir"

%QUBIT = type opaque
%RESULT = type opaque

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.2 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1

define void @__hugr__.main.1() #0 {
alloca_block:
  %0 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %1 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %0, 1
  %2 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %3 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %2, 1
  %4 = extractvalue { i1, %QUBIT* } %1, 0
  %cond = icmp eq i1 %4, true
  br i1 %cond, label %cond_133_case_1, label %cond_133_case_0

cond_133_case_1:                                  ; preds = %alloca_block
  %5 = extractvalue { i1, %QUBIT* } %1, 1
  br label %cond_exit_133

6:                                                ; preds = %34, %cond_exit_122
  %"19_1.0" = phi i64 [ %46, %cond_exit_122 ], [ %62, %34 ]
  %"19_0.0" = phi i64 [ %45, %cond_exit_122 ], [ %61, %34 ]
  %7 = insertvalue { i64, i64 } poison, i64 %"19_0.0", 0
  %8 = insertvalue { i64, i64 } %7, i64 %"19_1.0", 1
  %9 = call { i1, { i64, i64 } } @__hugr__.__hasnext__.25({ i64, i64 } %8)
  %10 = extractvalue { i1, { i64, i64 } } %9, 0
  %11 = extractvalue { i1, { i64, i64 } } %9, 1
  %12 = insertvalue { { i64, i64 }, i1 } poison, i1 %10, 1
  %13 = insertvalue { { i64, i64 }, i1 } %12, { i64, i64 } %11, 0
  %14 = extractvalue { { i64, i64 }, i1 } %13, 1
  %15 = extractvalue { { i64, i64 }, i1 } %13, 0
  %16 = extractvalue { i64, i64 } %15, 0
  %17 = extractvalue { i64, i64 } %15, 1
  %cond177 = icmp eq i1 %14, true
  br i1 %cond177, label %18, label %23

18:                                               ; preds = %6
  %19 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %20 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %19, 1
  %21 = extractvalue { i1, %QUBIT* } %20, 0
  %cond178 = icmp eq i1 %21, true
  br i1 %cond178, label %cond_144_case_1, label %cond_144_case_0

cond_144_case_1:                                  ; preds = %18
  %22 = extractvalue { i1, %QUBIT* } %20, 1
  br label %cond_exit_144

23:                                               ; preds = %6
  %24 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"0.0")
  %25 = call i1 @__quantum__qis__read_result__body(%RESULT* %24)
  %26 = select i1 %25, i1 true, i1 false
  %27 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"09.0")
  %28 = call i1 @__quantum__qis__read_result__body(%RESULT* %27)
  %29 = select i1 %28, i1 true, i1 false
  %30 = insertvalue { i64, i64 } poison, i64 %16, 0
  %31 = insertvalue { i64, i64 } %30, i64 %17, 1
  call void @__hugr__.__end__.36({ i64, i64 } %31)
  %32 = select i1 %26, i1 true, i1 false
  call void @__quantum__rt__bool_record_output(i1 %32, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %33 = select i1 %29, i1 true, i1 false
  call void @__quantum__rt__bool_record_output(i1 %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  ret void

34:                                               ; preds = %cond_exit_144, %64
  br label %6

cond_133_case_0:                                  ; preds = %alloca_block
  %35 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 0
  %36 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 1
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %35, i8* %36)
  call void @abort()
  br label %cond_exit_133

cond_exit_133:                                    ; preds = %cond_133_case_1, %cond_133_case_0
  %"0.0" = phi %QUBIT* [ null, %cond_133_case_0 ], [ %5, %cond_133_case_1 ]
  %38 = extractvalue { i1, %QUBIT* } %3, 0
  %cond176 = icmp eq i1 %38, true
  br i1 %cond176, label %cond_122_case_1, label %cond_122_case_0

cond_122_case_1:                                  ; preds = %cond_exit_133
  %39 = extractvalue { i1, %QUBIT* } %3, 1
  br label %cond_exit_122

cond_122_case_0:                                  ; preds = %cond_exit_133
  %40 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 0
  %41 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 1
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %40, i8* %41)
  call void @abort()
  br label %cond_exit_122

cond_exit_122:                                    ; preds = %cond_122_case_1, %cond_122_case_0
  %"09.0" = phi %QUBIT* [ null, %cond_122_case_0 ], [ %39, %cond_122_case_1 ]
  %43 = insertvalue { i64, i64 } poison, i64 0, 0
  %44 = insertvalue { i64, i64 } %43, i64 10, 1
  %45 = extractvalue { i64, i64 } %44, 0
  %46 = extractvalue { i64, i64 } %44, 1
  br label %6

cond_144_case_0:                                  ; preds = %18
  %47 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 0
  %48 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0) }, 1
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.2, i32 0, i32 0), i32 %47, i8* %48)
  call void @abort()
  br label %cond_exit_144

cond_exit_144:                                    ; preds = %cond_144_case_1, %cond_144_case_0
  %"084.0" = phi %QUBIT* [ null, %cond_144_case_0 ], [ %22, %cond_144_case_1 ]
  call void @__quantum__qis__phasedx__body(double 0x3FF921FB54442D18, double 0xBFF921FB54442D18, %QUBIT* %"084.0")
  call void @__quantum__qis__rz__body(double 0x400921FB54442D18, %QUBIT* %"084.0")
  %50 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"084.0")
  %51 = call i1 @__quantum__qis__read_result__body(%RESULT* %50)
  %52 = select i1 %51, i1 true, i1 false
  %53 = insertvalue { i64, i64 } poison, i64 %16, 0
  %54 = insertvalue { i64, i64 } %53, i64 %17, 1
  %55 = call { i64, { i64, i64 } } @__hugr__.__next__.52({ i64, i64 } %54)
  %56 = extractvalue { i64, { i64, i64 } } %55, 0
  %57 = extractvalue { i64, { i64, i64 } } %55, 1
  %58 = insertvalue { { i64, i64 }, i64 } poison, i64 %56, 1
  %59 = insertvalue { { i64, i64 }, i64 } %58, { i64, i64 } %57, 0
  %60 = extractvalue { { i64, i64 }, i64 } %59, 0
  %61 = extractvalue { i64, i64 } %60, 0
  %62 = extractvalue { i64, i64 } %60, 1
  %63 = select i1 %52, i1 true, i1 false
  %cond179 = icmp eq i1 %63, true
  br i1 %cond179, label %64, label %34

64:                                               ; preds = %cond_exit_144
  call void @__quantum__qis__phasedx__body(double 0x3FF921FB54442D18, double 0xBFF921FB54442D18, %QUBIT* %"09.0")
  call void @__quantum__qis__rz__body(double 0x400921FB54442D18, %QUBIT* %"09.0")
  br label %34
}

declare %QUBIT* @__quantum__rt__qubit_allocate()

declare i32 @printf(i8*, ...)

declare void @abort()

define { i1, { i64, i64 } } @__hugr__.__hasnext__.25({ i64, i64 } %0) {
alloca_block:
  %1 = extractvalue { i64, i64 } %0, 0
  %2 = extractvalue { i64, i64 } %0, 1
  %3 = insertvalue { i64, i64 } poison, i64 %1, 0
  %4 = insertvalue { i64, i64 } %3, i64 %2, 1
  %5 = icmp slt i64 %1, %2
  %6 = select i1 %5, i1 true, i1 false
  %7 = insertvalue { { i64, i64 }, i1 } poison, i1 %6, 1
  %8 = insertvalue { { i64, i64 }, i1 } %7, { i64, i64 } %4, 0
  %9 = extractvalue { { i64, i64 }, i1 } %8, 1
  %10 = extractvalue { { i64, i64 }, i1 } %8, 0
  %mrv = insertvalue { i1, { i64, i64 } } undef, i1 %9, 0
  %mrv25 = insertvalue { i1, { i64, i64 } } %mrv, { i64, i64 } %10, 1
  ret { i1, { i64, i64 } } %mrv25
}

declare %RESULT* @__quantum__qis__m__body(%QUBIT*)

declare i1 @__quantum__qis__read_result__body(%RESULT*)

define void @__hugr__.__end__.36({ i64, i64 } %0) {
alloca_block:
  ret void
}

declare void @__quantum__rt__bool_record_output(i1, i8*)

declare void @__quantum__qis__phasedx__body(double, double, %QUBIT*)

declare void @__quantum__qis__rz__body(double, %QUBIT*)

define { i64, { i64, i64 } } @__hugr__.__next__.52({ i64, i64 } %0) {
alloca_block:
  %1 = extractvalue { i64, i64 } %0, 0
  %2 = extractvalue { i64, i64 } %0, 1
  %3 = add i64 %1, 1
  %4 = insertvalue { i64, i64 } poison, i64 %3, 0
  %5 = insertvalue { i64, i64 } %4, i64 %2, 1
  %6 = insertvalue { { i64, i64 }, i64 } poison, i64 %1, 1
  %7 = insertvalue { { i64, i64 }, i64 } %6, { i64, i64 } %5, 0
  %8 = extractvalue { { i64, i64 }, i64 } %7, 1
  %9 = extractvalue { { i64, i64 }, i64 } %7, 0
  %mrv = insertvalue { i64, { i64, i64 } } undef, i64 %8, 0
  %mrv25 = insertvalue { i64, { i64, i64 } } %mrv, { i64, i64 } %9, 1
  ret { i64, { i64, i64 } } %mrv25
}

attributes #0 = { "entry_point" "output_labeling_schema" "qir_profiles"="custom" "required_num_qubits"="20" "required_num_results"="20" }
