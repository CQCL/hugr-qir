---
source: tests/guppy.rs
expression: compile(&mut hugr)
---
; ModuleID = 'hugr-qir'
source_filename = "hugr-qir"

%QUBIT = type opaque
%RESULT = type opaque

@0 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@1 = private unnamed_addr constant [37 x i8] c"Expected variant 1 but got variant 0\00", align 1
@prelude.panic_template.1 = private unnamed_addr constant [34 x i8] c"Program panicked (signal %i): %s\0A\00", align 1
@2 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"0\00", align 1

define void @__hugr__.main.1() #0 {
alloca_block:
  %0 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %1 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %0, 1
  %2 = call %QUBIT* @__quantum__rt__qubit_allocate()
  %3 = insertvalue { i1, %QUBIT* } { i1 true, %QUBIT* poison }, %QUBIT* %2, 1
  %4 = extractvalue { i1, %QUBIT* } %1, 0
  %cond = icmp eq i1 %4, true
  br i1 %cond, label %cond_117_case_1, label %cond_117_case_0

cond_117_case_1:                                  ; preds = %alloca_block
  %5 = extractvalue { i1, %QUBIT* } %1, 1
  br label %cond_exit_117

6:                                                ; preds = %46, %cond_exit_106
  %"19_1.0" = phi i64 [ %36, %cond_exit_106 ], [ %62, %46 ]
  %"19_0.0" = phi i64 [ %35, %cond_exit_106 ], [ %61, %46 ]
  %7 = insertvalue { i64, i64 } poison, i64 %"19_0.0", 0
  %8 = insertvalue { i64, i64 } %7, i64 %"19_1.0", 1
  %9 = extractvalue { i64, i64 } %8, 0
  %10 = extractvalue { i64, i64 } %8, 1
  %11 = insertvalue { i64, i64 } poison, i64 %9, 0
  %12 = insertvalue { i64, i64 } %11, i64 %10, 1
  %13 = icmp slt i64 %9, %10
  %14 = select i1 %13, i1 true, i1 false
  %15 = insertvalue { { i64, i64 }, i1 } poison, i1 %14, 1
  %16 = insertvalue { { i64, i64 }, i1 } %15, { i64, i64 } %12, 0
  %17 = extractvalue { { i64, i64 }, i1 } %16, 1
  %18 = extractvalue { { i64, i64 }, i1 } %16, 0
  %19 = insertvalue { { i64, i64 }, i1 } poison, i1 %17, 1
  %20 = insertvalue { { i64, i64 }, i1 } %19, { i64, i64 } %18, 0
  %21 = extractvalue { { i64, i64 }, i1 } %20, 1
  %22 = extractvalue { { i64, i64 }, i1 } %20, 0
  %23 = extractvalue { i64, i64 } %22, 0
  %24 = extractvalue { i64, i64 } %22, 1
  %cond168 = icmp eq i1 %21, true
  br i1 %cond168, label %46, label %37

cond_117_case_0:                                  ; preds = %alloca_block
  %25 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 0
  %26 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0) }, 1
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template, i32 0, i32 0), i32 %25, i8* %26)
  call void @abort()
  br label %cond_exit_117

cond_exit_117:                                    ; preds = %cond_117_case_1, %cond_117_case_0
  %"0.0" = phi %QUBIT* [ null, %cond_117_case_0 ], [ %5, %cond_117_case_1 ]
  %28 = extractvalue { i1, %QUBIT* } %3, 0
  %cond167 = icmp eq i1 %28, true
  br i1 %cond167, label %cond_106_case_1, label %cond_106_case_0

cond_106_case_1:                                  ; preds = %cond_exit_117
  %29 = extractvalue { i1, %QUBIT* } %3, 1
  br label %cond_exit_106

cond_106_case_0:                                  ; preds = %cond_exit_117
  %30 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 0
  %31 = extractvalue { i32, i8* } { i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @1, i32 0, i32 0) }, 1
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @prelude.panic_template.1, i32 0, i32 0), i32 %30, i8* %31)
  call void @abort()
  br label %cond_exit_106

cond_exit_106:                                    ; preds = %cond_106_case_1, %cond_106_case_0
  %"09.0" = phi %QUBIT* [ null, %cond_106_case_0 ], [ %29, %cond_106_case_1 ]
  %33 = insertvalue { i64, i64 } poison, i64 0, 0
  %34 = insertvalue { i64, i64 } %33, i64 10, 1
  %35 = extractvalue { i64, i64 } %34, 0
  %36 = extractvalue { i64, i64 } %34, 1
  br label %6

37:                                               ; preds = %6
  %38 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"0.0")
  %39 = call i1 @__quantum__qis__read_result__body(%RESULT* %38)
  %40 = select i1 %39, i1 true, i1 false
  %41 = call %RESULT* @__quantum__qis__m__body(%QUBIT* %"09.0")
  %42 = call i1 @__quantum__qis__read_result__body(%RESULT* %41)
  %43 = select i1 %42, i1 true, i1 false
  %44 = select i1 %40, i1 true, i1 false
  call void @__quantum__rt__bool_record_output(i1 %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0))
  %45 = select i1 %43, i1 true, i1 false
  call void @__quantum__rt__bool_record_output(i1 %45, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  ret void

46:                                               ; preds = %6
  call void @__quantum__qis__phasedx__body(double 0x3FF921FB54442D18, double 0xBFF921FB54442D18, %QUBIT* %"09.0")
  call void @__quantum__qis__rz__body(double 0x400921FB54442D18, %QUBIT* %"09.0")
  %47 = insertvalue { i64, i64 } poison, i64 %23, 0
  %48 = insertvalue { i64, i64 } %47, i64 %24, 1
  %49 = extractvalue { i64, i64 } %48, 0
  %50 = extractvalue { i64, i64 } %48, 1
  %51 = add i64 %49, 1
  %52 = insertvalue { i64, i64 } poison, i64 %51, 0
  %53 = insertvalue { i64, i64 } %52, i64 %50, 1
  %54 = insertvalue { { i64, i64 }, i64 } poison, i64 %49, 1
  %55 = insertvalue { { i64, i64 }, i64 } %54, { i64, i64 } %53, 0
  %56 = extractvalue { { i64, i64 }, i64 } %55, 1
  %57 = extractvalue { { i64, i64 }, i64 } %55, 0
  %58 = insertvalue { { i64, i64 }, i64 } poison, i64 %56, 1
  %59 = insertvalue { { i64, i64 }, i64 } %58, { i64, i64 } %57, 0
  %60 = extractvalue { { i64, i64 }, i64 } %59, 0
  %61 = extractvalue { i64, i64 } %60, 0
  %62 = extractvalue { i64, i64 } %60, 1
  br label %6
}

declare %QUBIT* @__quantum__rt__qubit_allocate()

declare i32 @printf(i8*, ...)

declare void @abort()

declare %RESULT* @__quantum__qis__m__body(%QUBIT*)

declare i1 @__quantum__qis__read_result__body(%RESULT*)

declare void @__quantum__rt__bool_record_output(i1, i8*)

declare void @__quantum__qis__phasedx__body(double, double, %QUBIT*)

declare void @__quantum__qis__rz__body(double, %QUBIT*)

attributes #0 = { "entry_point" "output_labeling_schema" "qir_profiles"="custom" "required_num_qubits"="20" "required_num_results"="20" }
